import {
  DismissableLayer,
  FocusScope,
  Presence,
  Primitive,
  UnstablePortal,
  _extends,
  composeEventHandlers,
  composeRefs,
  createContext,
  createContextScope,
  useComposedRefs,
  useControllableState,
  useFocusGuards,
  useId
} from "./chunk-VHM23NVJ.js";
import {
  Combination_default,
  hideOthers
} from "./chunk-KL37XWKA.js";
import "./chunk-G52XTN3B.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@radix-ui/react-dialog/node_modules/@radix-ui/react-slot/dist/index.module.js
var t = __toESM(require_react());
var Slot = t.forwardRef((e, o2) => {
  const { children: a, ...s } = e;
  return t.Children.toArray(a).some(l) ? t.createElement(t.Fragment, null, t.Children.map(a, (e2) => l(e2) ? t.createElement(n, _extends({}, s, { ref: o2 }), e2.props.children) : e2)) : t.createElement(n, _extends({}, s, { ref: o2 }), a);
});
Slot.displayName = "Slot";
var n = t.forwardRef((r, n2) => {
  const { children: l2, ...a } = r;
  return t.isValidElement(l2) ? t.cloneElement(l2, { ...o(a, l2.props), ref: composeRefs(n2, l2.ref) }) : t.Children.count(l2) > 1 ? t.Children.only(null) : null;
});
n.displayName = "SlotClone";
var Slottable = ({ children: e }) => t.createElement(t.Fragment, null, e);
function l(e) {
  return t.isValidElement(e) && e.type === Slottable;
}
function o(e, t2) {
  const r = { ...t2 };
  for (const n2 in t2) {
    const l2 = e[n2], o2 = t2[n2];
    /^on[A-Z]/.test(n2) ? r[n2] = (...e2) => {
      null == o2 || o2(...e2), null == l2 || l2(...e2);
    } : "style" === n2 ? r[n2] = { ...l2, ...o2 } : "className" === n2 && (r[n2] = [l2, o2].filter(Boolean).join(" "));
  }
  return { ...e, ...r };
}

// node_modules/@radix-ui/react-dialog/dist/index.module.js
var m = __toESM(require_react());
var [x, C] = createContextScope("Dialog");
var [v, E] = x("Dialog");
var Dialog = (e) => {
  const { __scopeDialog: o2, children: t2, open: r, defaultOpen: n2, onOpenChange: a, modal: i = true, allowPinchZoom: l2 } = e, c = m.useRef(null), p = m.useRef(null), [d = false, f] = useControllableState({ prop: r, defaultProp: n2, onChange: a });
  return m.createElement(v, { scope: o2, triggerRef: c, contentRef: p, contentId: useId(), titleId: useId(), descriptionId: useId(), open: d, onOpenChange: f, onOpenToggle: m.useCallback(() => f((e2) => !e2), [f]), modal: i, allowPinchZoom: l2 }, t2);
};
var DialogTrigger = m.forwardRef((e, o2) => {
  const { __scopeDialog: t2, ...r } = e, a = E("DialogTrigger", t2), i = useComposedRefs(o2, a.triggerRef);
  return m.createElement(Primitive.button, _extends({ type: "button", "aria-haspopup": "dialog", "aria-expanded": a.open, "aria-controls": a.contentId, "data-state": b(a.open) }, r, { ref: i, onClick: composeEventHandlers(e.onClick, a.onOpenToggle) }));
});
var DialogPortal = (e) => {
  const { __scopeDialog: o2, forceMount: t2, children: r, container: n2 } = e, l2 = E("DialogPortal", o2);
  return m.createElement(m.Fragment, null, m.Children.map(r, (e2) => m.createElement(Presence, { present: t2 || l2.open }, m.createElement(UnstablePortal, { asChild: true, container: n2 }, e2))));
};
var DialogOverlay = m.forwardRef((e, o2) => {
  const { forceMount: t2, ...r } = e, n2 = E("DialogOverlay", e.__scopeDialog);
  return n2.modal ? m.createElement(Presence, { present: t2 || n2.open }, m.createElement(R, _extends({}, r, { ref: o2 }))) : null;
});
var R = m.forwardRef((o2, r) => {
  const { __scopeDialog: a, ...i } = o2, l2 = E("DialogOverlay", a);
  return m.createElement(Combination_default, { as: Slot, allowPinchZoom: l2.allowPinchZoom, shards: [l2.contentRef] }, m.createElement(Primitive.div, _extends({ "data-state": b(l2.open) }, i, { ref: r, style: { pointerEvents: "auto", ...i.style } })));
});
var DialogContent = m.forwardRef((e, o2) => {
  const { forceMount: t2, ...r } = e, n2 = E("DialogContent", e.__scopeDialog);
  return m.createElement(Presence, { present: t2 || n2.open }, n2.modal ? m.createElement(_, _extends({}, r, { ref: o2 })) : m.createElement(O, _extends({}, r, { ref: o2 })));
});
var _ = m.forwardRef((e, t2) => {
  const r = E("DialogContent", e.__scopeDialog), n2 = m.useRef(null), a = useComposedRefs(t2, r.contentRef, n2);
  return m.useEffect(() => {
    const e2 = n2.current;
    if (e2)
      return hideOthers(e2);
  }, []), m.createElement(h, _extends({}, e, { ref: a, trapFocus: r.open, disableOutsidePointerEvents: true, onCloseAutoFocus: composeEventHandlers(e.onCloseAutoFocus, (e2) => {
    var o2;
    e2.preventDefault(), null === (o2 = r.triggerRef.current) || void 0 === o2 || o2.focus();
  }), onPointerDownOutside: composeEventHandlers(e.onPointerDownOutside, (e2) => {
    const o2 = e2.detail.originalEvent, t3 = 0 === o2.button && true === o2.ctrlKey;
    (2 === o2.button || t3) && e2.preventDefault();
  }), onFocusOutside: composeEventHandlers(e.onFocusOutside, (e2) => e2.preventDefault()) }));
});
var O = m.forwardRef((e, o2) => {
  const t2 = E("DialogContent", e.__scopeDialog), r = m.useRef(false);
  return m.createElement(h, _extends({}, e, { ref: o2, trapFocus: false, disableOutsidePointerEvents: false, onCloseAutoFocus: (o3) => {
    var n2, a;
    (null === (n2 = e.onCloseAutoFocus) || void 0 === n2 || n2.call(e, o3), o3.defaultPrevented) || (r.current || null === (a = t2.triggerRef.current) || void 0 === a || a.focus(), o3.preventDefault());
    r.current = false;
  }, onInteractOutside: (o3) => {
    var n2, a;
    null === (n2 = e.onInteractOutside) || void 0 === n2 || n2.call(e, o3), o3.defaultPrevented || (r.current = true);
    const i = o3.target;
    (null === (a = t2.triggerRef.current) || void 0 === a ? void 0 : a.contains(i)) && o3.preventDefault();
  } }));
});
var h = m.forwardRef((e, o2) => {
  const { __scopeDialog: t2, trapFocus: n2, onOpenAutoFocus: a, onCloseAutoFocus: i, ...s } = e, u = E("DialogContent", t2), p = m.useRef(null), d = useComposedRefs(o2, p);
  return useFocusGuards(), m.createElement(m.Fragment, null, m.createElement(FocusScope, { asChild: true, loop: true, trapped: n2, onMountAutoFocus: a, onUnmountAutoFocus: i }, m.createElement(DismissableLayer, _extends({ role: "dialog", id: u.contentId, "aria-describedby": u.descriptionId, "aria-labelledby": u.titleId, "data-state": b(u.open) }, s, { ref: d, onDismiss: () => u.onOpenChange(false) }))), false);
});
var DialogTitle = m.forwardRef((e, o2) => {
  const { __scopeDialog: t2, ...r } = e, a = E("DialogTitle", t2);
  return m.createElement(Primitive.h2, _extends({ id: a.titleId }, r, { ref: o2 }));
});
var DialogDescription = m.forwardRef((e, o2) => {
  const { __scopeDialog: t2, ...r } = e, a = E("DialogDescription", t2);
  return m.createElement(Primitive.p, _extends({ id: a.descriptionId }, r, { ref: o2 }));
});
var DialogClose = m.forwardRef((e, o2) => {
  const { __scopeDialog: t2, ...r } = e, a = E("DialogClose", t2);
  return m.createElement(Primitive.button, _extends({ type: "button" }, r, { ref: o2, onClick: composeEventHandlers(e.onClick, () => a.onOpenChange(false)) }));
});
function b(e) {
  return e ? "open" : "closed";
}
var [w, F] = createContext("DialogTitleWarning", { contentName: "DialogContent", titleName: "DialogTitle", docsSlug: "dialog" });
var Root = Dialog;
var Trigger = DialogTrigger;
var Portal = DialogPortal;
var Overlay = DialogOverlay;
var Content = DialogContent;
var Title = DialogTitle;
var Description = DialogDescription;
var Close = DialogClose;
export {
  Close,
  Content,
  Description,
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
  Overlay,
  Portal,
  Root,
  Title,
  Trigger,
  w as WarningProvider,
  C as createDialogScope
};
//# sourceMappingURL=@radix-ui_react-dialog.js.map
