{
  "version": 3,
  "sources": ["../../@radix-ui/react-dialog/node_modules/@radix-ui/react-slot/dist/packages/react/slot/src/Slot.tsx", "../../@radix-ui/react-dialog/dist/packages/react/dialog/src/Dialog.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n}\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.Children.toArray(children).some(isSlottable)) {\n    return (\n      <>\n        {React.Children.map(children, (child) => {\n          return isSlottable(child) ? (\n            <SlotClone {...slotProps} ref={forwardedRef}>\n              {child.props.children}\n            </SlotClone>\n          ) : (\n            child\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <SlotClone {...slotProps} ref={forwardedRef}>\n      {children}\n    </SlotClone>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotCloneProps {\n  children: React.ReactNode;\n}\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...mergeProps(slotProps, children.props),\n      ref: composeRefs(forwardedRef, (children as any).ref),\n    });\n  }\n\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return <>{children}</>;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction isSlottable(child: React.ReactNode): child is React.ReactElement {\n  return React.isValidElement(child) && child.type === Slottable;\n}\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    // if it's a handler, modify the override by composing the base handler\n    if (isHandler) {\n      overrideProps[propName] = (...args: unknown[]) => {\n        childPropValue?.(...args);\n        slotPropValue?.(...args);\n      };\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === 'className') {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\nexport type { SlotProps };\n", "import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext, createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { UnstablePortal } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\nimport { Slot } from '@radix-ui/react-slot';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype ScopedProps<P> = P & { __scopeDialog?: Scope };\nconst [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentRef: React.RefObject<DialogContentElement>;\n  contentId: string;\n  titleId: string;\n  descriptionId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n  allowPinchZoom: DialogProps['allowPinchZoom'];\n};\n\nconst [DialogProvider, useDialogContext] = createDialogContext<DialogContextValue>(DIALOG_NAME);\n\ntype RemoveScrollProps = React.ComponentProps<typeof RemoveScroll>;\ninterface DialogProps {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n  /**\n   * @see https://github.com/theKashey/react-remove-scroll#usage\n   */\n  allowPinchZoom?: RemoveScrollProps['allowPinchZoom'];\n  children?: React.ReactNode;\n}\n\nconst Dialog: React.FC<DialogProps> = (props: ScopedProps<DialogProps>) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n    allowPinchZoom,\n  } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const contentRef = React.useRef<DialogContentElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DialogProvider\n      scope={__scopeDialog}\n      triggerRef={triggerRef}\n      contentRef={contentRef}\n      contentId={useId()}\n      titleId={useId()}\n      descriptionId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n      allowPinchZoom={allowPinchZoom}\n    >\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\n\ntype DialogTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DialogTriggerProps extends PrimitiveButtonProps {}\n\nconst DialogTrigger = React.forwardRef<DialogTriggerElement, DialogTriggerProps>(\n  (props: ScopedProps<DialogTriggerProps>, forwardedRef) => {\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'DialogPortal';\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof UnstablePortal>;\ninterface DialogPortalProps extends Omit<PortalProps, 'asChild'> {\n  children?: React.ReactNode;\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogPortal: React.FC<DialogPortalProps> = (props: ScopedProps<DialogPortalProps>) => {\n  const { __scopeDialog, forceMount, children, container } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return (\n    <>\n      {React.Children.map(children, (child) => (\n        <Presence present={forceMount || context.open}>\n          <UnstablePortal asChild container={container}>\n            {child}\n          </UnstablePortal>\n        </Presence>\n      ))}\n    </>\n  );\n};\n\nDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayElement = DialogOverlayImplElement;\ninterface DialogOverlayProps extends DialogOverlayImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogOverlay = React.forwardRef<DialogOverlayElement, DialogOverlayProps>(\n  (props: ScopedProps<DialogOverlayProps>, forwardedRef) => {\n    const { forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? (\n      <Presence present={forceMount || context.open}>\n        <DialogOverlayImpl {...overlayProps} ref={forwardedRef} />\n      </Presence>\n    ) : null;\n  }\n);\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\ntype DialogOverlayImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DialogOverlayImplProps extends PrimitiveDivProps {}\n\nconst DialogOverlayImpl = React.forwardRef<DialogOverlayImplElement, DialogOverlayImplProps>(\n  (props: ScopedProps<DialogOverlayImplProps>, forwardedRef) => {\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return (\n      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n      // ie. when `Overlay` and `Content` are siblings\n      <RemoveScroll as={Slot} allowPinchZoom={context.allowPinchZoom} shards={[context.contentRef]}>\n        <Primitive.div\n          data-state={getState(context.open)}\n          {...overlayProps}\n          ref={forwardedRef}\n          // We re-enable pointer-events prevented by `Dialog.Content` to allow scrolling the overlay.\n          style={{ pointerEvents: 'auto', ...overlayProps.style }}\n        />\n      </RemoveScroll>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentElement = DialogContentTypeElement;\ninterface DialogContentProps extends DialogContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogContent = React.forwardRef<DialogContentElement, DialogContentProps>(\n  (props: ScopedProps<DialogContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <DialogContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <DialogContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentTypeElement = DialogContentImplElement;\ninterface DialogContentTypeProps\n  extends Omit<DialogContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {}\n\nconst DialogContentModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={composedRefs}\n        // we make sure focus isn't trapped once `DialogContent` has been closed\n        // (closed !== unmounted when animating out)\n        trapFocus={context.open}\n        disableOutsidePointerEvents\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          event.preventDefault();\n          context.triggerRef.current?.focus();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const originalEvent = event.detail.originalEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n          // If the event is a right-click, we shouldn't close because\n          // it is effectively as if we right-clicked the `Overlay`.\n          if (isRightClick) event.preventDefault();\n        })}\n        // When focus is trapped, a `focusout` event may still happen.\n        // We make sure we don't trigger our `onDismiss` in such case.\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) =>\n          event.preventDefault()\n        )}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst DialogContentNonModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = React.useRef(false);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) hasInteractedOutsideRef.current = true;\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          //\n          // We use `onInteractOutside` as some browsers also\n          // focus on pointer down, creating the same issue.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = Radix.ComponentPropsWithoutRef<typeof FocusScope>;\ninterface DialogContentImplProps extends Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * When `true`, focus cannot escape the `Content` via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst DialogContentImpl = React.forwardRef<DialogContentImplElement, DialogContentImplProps>(\n  (props: ScopedProps<DialogContentImplProps>, forwardedRef) => {\n    const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n\n    // Make sure the whole tree has focus guards as our `Dialog` will be\n    // the last element in the DOM (beacuse of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <>\n        <FocusScope\n          asChild\n          loop\n          trapped={trapFocus}\n          onMountAutoFocus={onOpenAutoFocus}\n          onUnmountAutoFocus={onCloseAutoFocus}\n        >\n          <DismissableLayer\n            role=\"dialog\"\n            id={context.contentId}\n            aria-describedby={context.descriptionId}\n            aria-labelledby={context.titleId}\n            data-state={getState(context.open)}\n            {...contentProps}\n            ref={composedRefs}\n            onDismiss={() => context.onOpenChange(false)}\n          />\n        </FocusScope>\n        {process.env.NODE_ENV !== 'production' && (\n          <>\n            <TitleWarning contentRef={contentRef} />\n            <DescriptionWarning contentRef={contentRef} />\n          </>\n        )}\n      </>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'DialogTitle';\n\ntype DialogTitleElement = React.ElementRef<typeof Primitive.h2>;\ntype PrimitiveHeading2Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h2>;\ninterface DialogTitleProps extends PrimitiveHeading2Props {}\n\nconst DialogTitle = React.forwardRef<DialogTitleElement, DialogTitleProps>(\n  (props: ScopedProps<DialogTitleProps>, forwardedRef) => {\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return <Primitive.h2 id={context.titleId} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'DialogDescription';\n\ntype DialogDescriptionElement = React.ElementRef<typeof Primitive.p>;\ntype PrimitiveParagraphProps = Radix.ComponentPropsWithoutRef<typeof Primitive.p>;\ninterface DialogDescriptionProps extends PrimitiveParagraphProps {}\n\nconst DialogDescription = React.forwardRef<DialogDescriptionElement, DialogDescriptionProps>(\n  (props: ScopedProps<DialogDescriptionProps>, forwardedRef) => {\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return <Primitive.p id={context.descriptionId} {...descriptionProps} ref={forwardedRef} />;\n  }\n);\n\nDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\n\ntype DialogCloseElement = React.ElementRef<typeof Primitive.button>;\ninterface DialogCloseProps extends PrimitiveButtonProps {}\n\nconst DialogClose = React.forwardRef<DialogCloseElement, DialogCloseProps>(\n  (props: ScopedProps<DialogCloseProps>, forwardedRef) => {\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst TITLE_WARNING_NAME = 'DialogTitleWarning';\n\nconst [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: 'dialog',\n});\n\ntype WarningProps = {\n  contentRef: React.RefObject<DialogContentElement>;\n};\n\nconst TitleWarning: React.FC<WarningProps> = ({ contentRef }) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n\n  React.useEffect(() => {\n    const hasLabel =\n      contentRef.current?.getAttribute('aria-label') ||\n      document.getElementById(contentRef.current?.getAttribute('aria-labelledby')!);\n\n    if (!hasLabel) throw new Error(MESSAGE);\n  }, [MESSAGE, contentRef]);\n\n  return null;\n};\n\nconst DESCRIPTION_WARNING_NAME = 'DialogDescriptionWarning';\n\nconst DescriptionWarning: React.FC<WarningProps> = ({ contentRef }) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute('aria-describedby');\n    if (describedById) {\n      const hasDescription = document.getElementById(describedById);\n      if (describedById && !hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef]);\n\n  return null;\n};\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Portal = DialogPortal;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Title = DialogTitle;\nconst Description = DialogDescription;\nconst Close = DialogClose;\n\nexport {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n};\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n};\n"],
  "mappings": "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",
  "names": ["Slot", "forwardRef", "props", "forwardedRef", "children", "slotProps", "Children", "toArray", "some", "isSlottable", "createElement", "Fragment", "map", "child", "$d34e8c328cb3dd19ab7a2f6eafa6ad$var$SlotClone", "_babelRuntimeHelpersEsmExtends", "ref", "displayName", "SlotClone", "isValidElement", "cloneElement", "mergeProps", "composeRefs", "count", "only", "Slottable", "type", "childProps", "overrideProps", "propName", "slotPropValue", "childPropValue", "test", "args", "filter", "Boolean", "join", "createDialogContext", "createDialogScope", "createContextScope", "DialogProvider", "useDialogContext", "createDialogContext", "Dialog", "props", "__scopeDialog", "children", "open", "openProp", "defaultOpen", "onOpenChange", "modal", "allowPinchZoom", "triggerRef", "useRef", "contentRef", "setOpen", "useControllableState", "prop", "defaultProp", "onChange", "createElement", "$da81f3af863821fb8a193d321c41d$var$DialogProvider", "scope", "contentId", "useId", "titleId", "descriptionId", "onOpenToggle", "useCallback", "prevOpen", "DialogTrigger", "forwardRef", "forwardedRef", "triggerProps", "context", "composedTriggerRef", "useComposedRefs", "Primitive", "button", "_babelRuntimeHelpersEsmExtends", "type", "getState", "ref", "onClick", "composeEventHandlers", "DialogPortal", "forceMount", "container", "Fragment", "Children", "map", "child", "Presence", "present", "UnstablePortal", "asChild", "DialogOverlay", "overlayProps", "$da81f3af863821fb8a193d321c41d$var$DialogOverlayImpl", "DialogOverlayImpl", "RemoveScroll", "as", "Slot", "shards", "div", "style", "pointerEvents", "DialogContent", "contentProps", "$da81f3af863821fb8a193d321c41d$var$DialogContentModal", "$da81f3af863821fb8a193d321c41d$var$DialogContentNonModal", "DialogContentModal", "composedRefs", "useEffect", "content", "current", "hideOthers", "$da81f3af863821fb8a193d321c41d$var$DialogContentImpl", "trapFocus", "disableOutsidePointerEvents", "onCloseAutoFocus", "event", "_context$triggerRef$c", "preventDefault", "focus", "onPointerDownOutside", "originalEvent", "detail", "ctrlLeftClick", "ctrlKey", "onFocusOutside", "DialogContentNonModal", "hasInteractedOutsideRef", "_props$onCloseAutoFoc", "_context$triggerRef$c2", "call", "defaultPrevented", "onInteractOutside", "_props$onInteractOuts", "_context$triggerRef$c3", "target", "contains", "DialogContentImpl", "onOpenAutoFocus", "useFocusGuards", "FocusScope", "loop", "trapped", "onMountAutoFocus", "onUnmountAutoFocus", "DismissableLayer", "role", "id", "onDismiss", "DialogTitle", "titleProps", "h2", "DialogDescription", "descriptionProps", "p", "DialogClose", "closeProps", "WarningProvider", "useWarningContext", "createContext", "contentName", "titleName", "docsSlug", "Root", "Dialog", "Trigger", "DialogTrigger", "Portal", "DialogPortal", "Overlay", "DialogOverlay", "Content", "DialogContent", "Title", "DialogTitle", "Description", "DialogDescription", "Close", "DialogClose"]
}
