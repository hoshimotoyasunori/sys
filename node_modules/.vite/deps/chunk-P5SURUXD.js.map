{
  "version": 3,
  "sources": ["../../@radix-ui/react-use-layout-effect/dist/packages/react/use-layout-effect/src/useLayoutEffect.tsx", "../../@radix-ui/react-id/dist/packages/react/id/src/id.tsx", "../../@radix-ui/react-compose-refs/dist/packages/react/compose-refs/src/composeRefs.tsx", "../../@radix-ui/react-presence/dist/packages/react/presence/src/Presence.tsx", "../../@radix-ui/react-presence/dist/packages/react/presence/src/useStateMachine.tsx", "../../@babel/runtime/helpers/esm/extends.js", "../../@radix-ui/react-primitive/node_modules/@radix-ui/react-slot/dist/packages/react/slot/src/Slot.tsx", "../../@radix-ui/react-primitive/dist/packages/react/primitive/src/Primitive.tsx", "../../@radix-ui/react-use-callback-ref/dist/packages/react/use-callback-ref/src/useCallbackRef.tsx", "../../@radix-ui/react-use-controllable-state/dist/packages/react/use-controllable-state/src/useControllableState.tsx", "../../@radix-ui/react-context/dist/packages/react/context/src/createContext.tsx", "../../@radix-ui/primitive/dist/packages/core/primitive/src/primitive.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\n/**\n * On the server, React emits a warning when calling `useLayoutEffect`.\n * This is because neither `useLayoutEffect` nor `useEffect` run on the server.\n * We use this safe version which suppresses the warning by replacing it with a noop on the server.\n *\n * See: https://reactjs.org/docs/hooks-reference.html#uselayouteffect\n */\nconst useLayoutEffect = Boolean(globalThis?.document) ? React.useLayoutEffect : () => {};\n\nexport { useLayoutEffect };\n", "import * as React from 'react';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\n\n// We `toString()` to prevent bundlers from trying to `import { useId } from 'react';`\nconst useReactId = (React as any)['useId'.toString()] || (() => undefined);\nlet count = 0;\n\nfunction useId(deterministicId?: string): string {\n  const [id, setId] = React.useState<string | undefined>(useReactId());\n  // React versions older than 18 will have client-side ids only.\n  useLayoutEffect(() => {\n    if (!deterministicId) setId((reactId) => reactId ?? String(count++));\n  }, [deterministicId]);\n  return deterministicId || (id ? `radix-${id}` : '');\n}\n\n// DEPRECATED\nfunction IdProvider({ children }: { children: React.ReactNode }) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.warn(ID_PROVIDER_DEPRECATED);\n    }\n  }, []);\n  return <>{children}</>;\n}\n\nconst ID_PROVIDER_DEPRECATED = `Warning: The \\`IdProvider\\` has been deprecated. For details, see https://radix-ui.com/docs/primitives/utilities/id-provider`;\n\nexport { IdProvider, useId };\n", "import * as React from 'react';\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    (ref as React.MutableRefObject<T>).current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]) {\n  return (node: T) => refs.forEach((ref) => setRef(ref, node));\n}\n\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeRefs, useComposedRefs };\n", "import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useStateMachine } from './useStateMachine';\n\ninterface PresenceProps {\n  present: boolean;\n  children: React.ReactElement | ((props: { present: boolean }) => React.ReactElement);\n}\n\nconst Presence: React.FC<PresenceProps> = (props) => {\n  const { present, children } = props;\n  const presence = usePresence(present);\n\n  const child = (\n    typeof children === 'function'\n      ? children({ present: presence.isPresent })\n      : React.Children.only(children)\n  ) as React.ReactElement;\n\n  const ref = useComposedRefs(presence.ref, (child as any).ref);\n  const forceMount = typeof children === 'function';\n  return forceMount || presence.isPresent ? React.cloneElement(child, { ref }) : null;\n};\n\nPresence.displayName = 'Presence';\n\n/* -------------------------------------------------------------------------------------------------\n * usePresence\n * -----------------------------------------------------------------------------------------------*/\n\nfunction usePresence(present: boolean) {\n  const [node, setNode] = React.useState<HTMLElement>();\n  const stylesRef = React.useRef<CSSStyleDeclaration>({} as any);\n  const prevPresentRef = React.useRef(present);\n  const prevAnimationNameRef = React.useRef<string>('none');\n  const initialState = present ? 'mounted' : 'unmounted';\n  const [state, send] = useStateMachine(initialState, {\n    mounted: {\n      UNMOUNT: 'unmounted',\n      ANIMATION_OUT: 'unmountSuspended',\n    },\n    unmountSuspended: {\n      MOUNT: 'mounted',\n      ANIMATION_END: 'unmounted',\n    },\n    unmounted: {\n      MOUNT: 'mounted',\n    },\n  });\n\n  React.useEffect(() => {\n    const currentAnimationName = getAnimationName(stylesRef.current);\n    prevAnimationNameRef.current = state === 'mounted' ? currentAnimationName : 'none';\n  }, [state]);\n\n  useLayoutEffect(() => {\n    const styles = stylesRef.current;\n    const wasPresent = prevPresentRef.current;\n    const hasPresentChanged = wasPresent !== present;\n\n    if (hasPresentChanged) {\n      const prevAnimationName = prevAnimationNameRef.current;\n      const currentAnimationName = getAnimationName(styles);\n\n      if (present) {\n        send('MOUNT');\n      } else if (currentAnimationName === 'none' || styles?.display === 'none') {\n        // If there is no exit animation or the element is hidden, animations won't run\n        // so we unmount instantly\n        send('UNMOUNT');\n      } else {\n        /**\n         * When `present` changes to `false`, we check changes to animation-name to\n         * determine whether an animation has started. We chose this approach (reading\n         * computed styles) because there is no `animationrun` event and `animationstart`\n         * fires after `animation-delay` has expired which would be too late.\n         */\n        const isAnimating = prevAnimationName !== currentAnimationName;\n\n        if (wasPresent && isAnimating) {\n          send('ANIMATION_OUT');\n        } else {\n          send('UNMOUNT');\n        }\n      }\n\n      prevPresentRef.current = present;\n    }\n  }, [present, send]);\n\n  useLayoutEffect(() => {\n    if (node) {\n      /**\n       * Triggering an ANIMATION_OUT during an ANIMATION_IN will fire an `animationcancel`\n       * event for ANIMATION_IN after we have entered `unmountSuspended` state. So, we\n       * make sure we only trigger ANIMATION_END for the currently active animation.\n       */\n      const handleAnimationEnd = (event: AnimationEvent) => {\n        const currentAnimationName = getAnimationName(stylesRef.current);\n        const isCurrentAnimation = currentAnimationName.includes(event.animationName);\n        if (event.target === node && isCurrentAnimation) {\n          send('ANIMATION_END');\n        }\n      };\n      const handleAnimationStart = (event: AnimationEvent) => {\n        if (event.target === node) {\n          // if animation occurred, store its name as the previous animation.\n          prevAnimationNameRef.current = getAnimationName(stylesRef.current);\n        }\n      };\n      node.addEventListener('animationstart', handleAnimationStart);\n      node.addEventListener('animationcancel', handleAnimationEnd);\n      node.addEventListener('animationend', handleAnimationEnd);\n      return () => {\n        node.removeEventListener('animationstart', handleAnimationStart);\n        node.removeEventListener('animationcancel', handleAnimationEnd);\n        node.removeEventListener('animationend', handleAnimationEnd);\n      };\n    } else {\n      // Transition to the unmounted state if the node is removed prematurely.\n      // We avoid doing so during cleanup as the node may change but still exist.\n      send('ANIMATION_END');\n    }\n  }, [node, send]);\n\n  return {\n    isPresent: ['mounted', 'unmountSuspended'].includes(state),\n    ref: React.useCallback((node: HTMLElement) => {\n      if (node) stylesRef.current = getComputedStyle(node);\n      setNode(node);\n    }, []),\n  };\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getAnimationName(styles?: CSSStyleDeclaration) {\n  return styles?.animationName || 'none';\n}\n\nexport { Presence };\nexport type { PresenceProps };\n", "import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// ðŸ¤¯ https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n", "function _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nexport { _extends as default };", "import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n}\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.Children.toArray(children).some(isSlottable)) {\n    return (\n      <>\n        {React.Children.map(children, (child) => {\n          return isSlottable(child) ? (\n            <SlotClone {...slotProps} ref={forwardedRef}>\n              {child.props.children}\n            </SlotClone>\n          ) : (\n            child\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <SlotClone {...slotProps} ref={forwardedRef}>\n      {children}\n    </SlotClone>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotCloneProps {\n  children: React.ReactNode;\n}\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...mergeProps(slotProps, children.props),\n      ref: composeRefs(forwardedRef, (children as any).ref),\n    });\n  }\n\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return <>{children}</>;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction isSlottable(child: React.ReactNode): child is React.ReactElement {\n  return React.isValidElement(child) && child.type === Slottable;\n}\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    // if it's a handler, modify the override by composing the base handler\n    if (isHandler) {\n      overrideProps[propName] = (...args: unknown[]) => {\n        childPropValue?.(...args);\n        slotPropValue?.(...args);\n      };\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === 'className') {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\nexport type { SlotProps };\n", "import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\n\nconst NODES = [\n  'a',\n  'button',\n  'div',\n  'h2',\n  'h3',\n  'img',\n  'li',\n  'nav',\n  'ol',\n  'p',\n  'span',\n  'svg',\n  'ul',\n] as const;\n\n// Temporary while we await merge of this fix:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/pull/55396\n// prettier-ignore\ntype PropsWithoutRef<P> = P extends any ? ('ref' extends keyof P ? Pick<P, Exclude<keyof P, 'ref'>> : P) : P;\ntype ComponentPropsWithoutRef<T extends React.ElementType> = PropsWithoutRef<\n  React.ComponentProps<T>\n>;\n\ntype Primitives = { [E in typeof NODES[number]]: PrimitiveForwardRefComponent<E> };\ntype PrimitivePropsWithRef<E extends React.ElementType> = React.ComponentPropsWithRef<E> & {\n  asChild?: boolean;\n};\n\ninterface PrimitiveForwardRefComponent<E extends React.ElementType>\n  extends React.ForwardRefExoticComponent<PrimitivePropsWithRef<E>> {}\n\n/* -------------------------------------------------------------------------------------------------\n * Primitive\n * -----------------------------------------------------------------------------------------------*/\n\nconst Primitive = NODES.reduce(\n  (primitive, node) => ({\n    ...primitive,\n    [node]: React.forwardRef((props: PrimitivePropsWithRef<typeof node>, forwardedRef: any) => {\n      const { asChild, ...primitiveProps } = props;\n      const Comp: any = asChild ? Slot : node;\n\n      React.useEffect(() => {\n        (window as any)[Symbol.for('radix-ui')] = true;\n      }, []);\n\n      // DEPRECATED\n      if (process.env.NODE_ENV === 'development' && (props as any).as) {\n        console.warn(AS_ERROR);\n      }\n\n      return <Comp {...primitiveProps} ref={forwardedRef} />;\n    }),\n  }),\n  {} as Primitives\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst AS_ERROR = `Warning: The \\`as\\` prop has been removed in favour of \\`asChild\\`. For details, see https://radix-ui.com/docs/primitives/overview/styling#changing-the-rendered-element`;\n\nconst Root = Primitive;\n\nexport {\n  Primitive,\n  //\n  Root,\n};\nexport type { ComponentPropsWithoutRef, PrimitivePropsWithRef };\n", "import * as React from 'react';\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: any[]) => any>(callback: T | undefined): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, []);\n}\n\nexport { useCallbackRef };\n", "import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n", "import * as React from 'react';\n\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = React.createContext<ContextValueType | undefined>(defaultContext);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext;\n    // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\n\ntype Scope<C = any> = { [scopeName: string]: React.Context<C>[] } | undefined;\ntype ScopeHook = (scope: Scope) => { [__scopeProp: string]: Scope };\ninterface CreateScope {\n  scopeName: string;\n  (): ScopeHook;\n}\n\nfunction createContextScope(scopeName: string, createContextScopeDeps: CreateScope[] = []) {\n  let defaultContexts: any[] = [];\n\n  /* -----------------------------------------------------------------------------------------------\n   * createContext\n   * ---------------------------------------------------------------------------------------------*/\n\n  function createContext<ContextValueType extends object | null>(\n    rootComponentName: string,\n    defaultContext?: ContextValueType\n  ) {\n    const BaseContext = React.createContext<ContextValueType | undefined>(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    function Provider(\n      props: ContextValueType & { scope: Scope<ContextValueType>; children: React.ReactNode }\n    ) {\n      const { scope, children, ...context } = props;\n      const Context = scope?.[scopeName][index] || BaseContext;\n      // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n      return <Context.Provider value={value}>{children}</Context.Provider>;\n    }\n\n    function useContext(consumerName: string, scope: Scope<ContextValueType | undefined>) {\n      const Context = scope?.[scopeName][index] || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext;\n      // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext] as const;\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * createScope\n   * ---------------------------------------------------------------------------------------------*/\n\n  const createScope: CreateScope = () => {\n    const scopeContexts = defaultContexts.map((defaultContext) => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope: Scope) {\n      const contexts = scope?.[scopeName] || scopeContexts;\n      return React.useMemo(\n        () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),\n        [scope, contexts]\n      );\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [createContext, composeContextScopes(createScope, ...createContextScopeDeps)] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\n\nfunction composeContextScopes(...scopes: CreateScope[]) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope: CreateScope = () => {\n    const scopeHooks = scopes.map((createScope) => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName,\n    }));\n\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes, ...currentScope };\n      }, {});\n\n      return React.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);\n    };\n  };\n\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nexport { createContext, createContextScope };\nexport type { CreateScope, Scope };\n", "function composeEventHandlers<E>(\n  originalEventHandler?: (event: E) => void,\n  ourEventHandler?: (event: E) => void,\n  { checkForDefaultPrevented = true } = {}\n) {\n  return function handleEvent(event: E) {\n    originalEventHandler?.(event);\n\n    if (checkForDefaultPrevented === false || !((event as unknown) as Event).defaultPrevented) {\n      return ourEventHandler?.(event);\n    }\n  };\n}\n\nexport { composeEventHandlers };\n"],
  "mappings": "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",
  "names": ["useLayoutEffect", "Boolean", "globalThis", "document", "useReactId", "React", "toString", "count", "useId", "deterministicId", "id", "setId", "useState", "useLayoutEffect", "reactId", "String", "composeRefs", "refs", "node", "forEach", "ref", "value", "current", "useComposedRefs", "useCallback", "Presence", "props", "present", "children", "presence", "node", "setNode", "useState", "stylesRef", "useRef", "prevPresentRef", "prevAnimationNameRef", "initialState", "state", "send", "machine", "useReducer", "event", "nextState", "mounted", "UNMOUNT", "ANIMATION_OUT", "unmountSuspended", "MOUNT", "ANIMATION_END", "unmounted", "useEffect", "currentAnimationName", "getAnimationName", "current", "useLayoutEffect", "styles", "wasPresent", "prevAnimationName", "display", "isAnimating", "handleAnimationEnd", "isCurrentAnimation", "includes", "animationName", "target", "handleAnimationStart", "addEventListener", "removeEventListener", "isPresent", "ref", "useCallback", "getComputedStyle", "child", "Children", "only", "useComposedRefs", "cloneElement", "displayName", "n", "e", "t", "r", "Slot", "forwardRef", "props", "forwardedRef", "children", "slotProps", "Children", "toArray", "some", "isSlottable", "createElement", "Fragment", "map", "child", "$d34e8c328cb3dd19ab7a2f6eafa6ad$var$SlotClone", "_babelRuntimeHelpersEsmExtends", "ref", "displayName", "SlotClone", "isValidElement", "cloneElement", "mergeProps", "composeRefs", "count", "only", "Slottable", "type", "childProps", "overrideProps", "propName", "slotPropValue", "childPropValue", "test", "args", "filter", "Boolean", "join", "Primitive", "reduce", "primitive", "node", "forwardRef", "props", "forwardedRef", "asChild", "primitiveProps", "Comp", "Slot", "useEffect", "window", "Symbol", "for", "createElement", "_babelRuntimeHelpersEsmExtends", "ref", "useCallbackRef", "callback", "callbackRef", "useRef", "useEffect", "current", "useMemo", "args", "_callbackRef$current", "call", "useControllableState", "prop", "defaultProp", "onChange", "uncontrolledProp", "setUncontrolledProp", "uncontrolledState", "useState", "value", "prevValueRef", "useRef", "handleChange", "useCallbackRef", "useEffect", "current", "isControlled", "useCallback", "nextValue", "setter", "createContext", "rootComponentName", "defaultContext", "Context", "Provider", "props", "children", "context", "value", "useMemo", "Object", "values", "createElement", "displayName", "consumerName", "useContext", "Error", "createContextScope", "scopeName", "createContextScopeDeps", "defaultContexts", "createScope", "scopeContexts", "map", "scope", "contexts", "BaseContext", "index", "length", "composeContextScopes", "scopes", "baseScope", "scopeHooks", "useScope", "overrideScopes", "nextScopes", "reduce", "composeEventHandlers", "originalEventHandler", "ourEventHandler", "checkForDefaultPrevented", "event", "defaultPrevented"]
}
