{
  "version": 3,
  "sources": ["../../@radix-ui/react-collapsible/dist/packages/react/collapsible/src/Collapsible.tsx", "../../@radix-ui/react-collection/node_modules/@radix-ui/react-slot/dist/packages/react/slot/src/Slot.tsx", "../../@radix-ui/react-collection/dist/packages/react/collection/src/Collection.tsx", "../../@radix-ui/react-accordion/dist/packages/react/accordion/src/Accordion.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Collapsible\n * -----------------------------------------------------------------------------------------------*/\n\nconst COLLAPSIBLE_NAME = 'Collapsible';\n\ntype ScopedProps<P> = P & { __scopeCollapsible?: Scope };\nconst [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);\n\ntype CollapsibleContextValue = {\n  contentId: string;\n  disabled?: boolean;\n  open: boolean;\n  onOpenToggle(): void;\n};\n\nconst [CollapsibleProvider, useCollapsibleContext] =\n  createCollapsibleContext<CollapsibleContextValue>(COLLAPSIBLE_NAME);\n\ntype CollapsibleElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface CollapsibleProps extends PrimitiveDivProps {\n  defaultOpen?: boolean;\n  open?: boolean;\n  disabled?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst Collapsible = React.forwardRef<CollapsibleElement, CollapsibleProps>(\n  (props: ScopedProps<CollapsibleProps>, forwardedRef) => {\n    const {\n      __scopeCollapsible,\n      open: openProp,\n      defaultOpen,\n      disabled,\n      onOpenChange,\n      ...collapsibleProps\n    } = props;\n\n    const [open = false, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen,\n      onChange: onOpenChange,\n    });\n\n    return (\n      <CollapsibleProvider\n        scope={__scopeCollapsible}\n        disabled={disabled}\n        contentId={useId()}\n        open={open}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      >\n        <Primitive.div\n          data-state={getState(open)}\n          data-disabled={disabled ? '' : undefined}\n          {...collapsibleProps}\n          ref={forwardedRef}\n        />\n      </CollapsibleProvider>\n    );\n  }\n);\n\nCollapsible.displayName = COLLAPSIBLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'CollapsibleTrigger';\n\ntype CollapsibleTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CollapsibleTriggerProps extends PrimitiveButtonProps {}\n\nconst CollapsibleTrigger = React.forwardRef<CollapsibleTriggerElement, CollapsibleTriggerProps>(\n  (props: ScopedProps<CollapsibleTriggerProps>, forwardedRef) => {\n    const { __scopeCollapsible, ...triggerProps } = props;\n    const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-controls={context.contentId}\n        aria-expanded={context.open || false}\n        data-state={getState(context.open)}\n        data-disabled={context.disabled ? '' : undefined}\n        disabled={context.disabled}\n        {...triggerProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nCollapsibleTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'CollapsibleContent';\n\ntype CollapsibleContentElement = CollapsibleContentImplElement;\ninterface CollapsibleContentProps extends Omit<CollapsibleContentImplProps, 'present'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CollapsibleContent = React.forwardRef<CollapsibleContentElement, CollapsibleContentProps>(\n  (props: ScopedProps<CollapsibleContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n    return (\n      <Presence present={forceMount || context.open}>\n        {({ present }) => (\n          <CollapsibleContentImpl {...contentProps} ref={forwardedRef} present={present} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nCollapsibleContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype CollapsibleContentImplElement = React.ElementRef<typeof Primitive.div>;\ninterface CollapsibleContentImplProps extends PrimitiveDivProps {\n  present: boolean;\n}\n\nconst CollapsibleContentImpl = React.forwardRef<\n  CollapsibleContentImplElement,\n  CollapsibleContentImplProps\n>((props: ScopedProps<CollapsibleContentImplProps>, forwardedRef) => {\n  const { __scopeCollapsible, present, children, ...contentProps } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef<CollapsibleContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const heightRef = React.useRef<number | undefined>(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef<number | undefined>(0);\n  const width = widthRef.current;\n  // when opening we want it to immediately open to retrieve dimensions\n  // when closing we delay `present` to retrieve dimensions before closing\n  const isOpen = context.open || isPresent;\n  const isMountAnimationPreventedRef = React.useRef(isOpen);\n  const originalStylesRef = React.useRef<Record<string, string>>();\n\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => (isMountAnimationPreventedRef.current = false));\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node) {\n      originalStylesRef.current = originalStylesRef.current || {\n        transitionDuration: node.style.transitionDuration,\n        animationDuration: node.style.animationDuration,\n        animationFillMode: node.style.animationFillMode,\n      };\n      // block any animations/transitions so the element renders at its full dimensions\n      node.style.transitionDuration = '0s';\n      node.style.animationDuration = '0s';\n      node.style.animationFillMode = 'none';\n\n      // get width and height from full dimensions\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n\n      // kick off any animations/transitions that were originally set up if it isn't the initial mount\n      if (!isMountAnimationPreventedRef.current) {\n        node.style.transitionDuration = originalStylesRef.current.transitionDuration;\n        node.style.animationDuration = originalStylesRef.current.animationDuration;\n        node.style.animationFillMode = originalStylesRef.current.animationFillMode;\n      }\n\n      setIsPresent(present);\n    }\n    /**\n     * depends on `context.open` because it will change to `false`\n     * when a close is triggered but `present` will be `false` on\n     * animation end (so when close finishes). This allows us to\n     * retrieve the dimensions *before* closing.\n     */\n  }, [context.open, present]);\n\n  return (\n    <Primitive.div\n      data-state={getState(context.open)}\n      data-disabled={context.disabled ? '' : undefined}\n      id={context.contentId}\n      hidden={!isOpen}\n      {...contentProps}\n      ref={composedRefs}\n      style={{\n        [`--radix-collapsible-content-height` as any]: height ? `${height}px` : undefined,\n        [`--radix-collapsible-content-width` as any]: width ? `${width}px` : undefined,\n        ...props.style,\n      }}\n    >\n      {isOpen && children}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Collapsible;\nconst Trigger = CollapsibleTrigger;\nconst Content = CollapsibleContent;\n\nexport {\n  createCollapsibleScope,\n  //\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  //\n  Root,\n  Trigger,\n  Content,\n};\nexport type { CollapsibleProps, CollapsibleTriggerProps, CollapsibleContentProps };\n", "import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n}\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.Children.toArray(children).some(isSlottable)) {\n    return (\n      <>\n        {React.Children.map(children, (child) => {\n          return isSlottable(child) ? (\n            <SlotClone {...slotProps} ref={forwardedRef}>\n              {child.props.children}\n            </SlotClone>\n          ) : (\n            child\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <SlotClone {...slotProps} ref={forwardedRef}>\n      {children}\n    </SlotClone>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotCloneProps {\n  children: React.ReactNode;\n}\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...mergeProps(slotProps, children.props),\n      ref: composeRefs(forwardedRef, (children as any).ref),\n    });\n  }\n\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return <>{children}</>;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction isSlottable(child: React.ReactNode): child is React.ReactElement {\n  return React.isValidElement(child) && child.type === Slottable;\n}\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    // if it's a handler, modify the override by composing the base handler\n    if (isHandler) {\n      overrideProps[propName] = (...args: unknown[]) => {\n        childPropValue?.(...args);\n        slotPropValue?.(...args);\n      };\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === 'className') {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\nexport type { SlotProps };\n", "import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Slot } from '@radix-ui/react-slot';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\ntype SlotProps = Radix.ComponentPropsWithoutRef<typeof Slot>;\ntype CollectionElement = HTMLElement;\ninterface CollectionProps extends SlotProps {\n  scope: any;\n}\n\n// We have resorted to returning slots directly rather than exposing primitives that can then\n// be slotted like `<CollectionItem as={Slot}>…</CollectionItem>`.\n// This is because we encountered issues with generic types that cannot be statically analysed\n// due to creating them dynamically via createCollection.\n\nfunction createCollection<ItemElement extends HTMLElement, ItemData = {}>(name: string) {\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionProvider\n   * ---------------------------------------------------------------------------------------------*/\n\n  const PROVIDER_NAME = name + 'CollectionProvider';\n  const [createCollectionContext, createCollectionScope] = createContextScope(PROVIDER_NAME);\n\n  type ContextValue = {\n    collectionRef: React.RefObject<CollectionElement>;\n    itemMap: Map<React.RefObject<ItemElement>, { ref: React.RefObject<ItemElement> } & ItemData>;\n  };\n\n  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext<ContextValue>(\n    PROVIDER_NAME,\n    { collectionRef: { current: null }, itemMap: new Map() }\n  );\n\n  const CollectionProvider: React.FC<{ scope: any }> = (props) => {\n    const { scope, children } = props;\n    const ref = React.useRef<CollectionElement>(null);\n    const itemMap = React.useRef<ContextValue['itemMap']>(new Map()).current;\n    return (\n      <CollectionProviderImpl scope={scope} itemMap={itemMap} collectionRef={ref}>\n        {children}\n      </CollectionProviderImpl>\n    );\n  };\n\n  CollectionProvider.displayName = PROVIDER_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionSlot\n   * ---------------------------------------------------------------------------------------------*/\n\n  const COLLECTION_SLOT_NAME = name + 'CollectionSlot';\n\n  const CollectionSlot = React.forwardRef<CollectionElement, CollectionProps>(\n    (props, forwardedRef) => {\n      const { scope, children } = props;\n      const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);\n      const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);\n      return <Slot ref={composedRefs}>{children}</Slot>;\n    }\n  );\n\n  CollectionSlot.displayName = COLLECTION_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionItem\n   * ---------------------------------------------------------------------------------------------*/\n\n  const ITEM_SLOT_NAME = name + 'CollectionItemSlot';\n  const ITEM_DATA_ATTR = 'data-radix-collection-item';\n\n  type CollectionItemSlotProps = ItemData & {\n    children: React.ReactNode;\n    scope: any;\n  };\n\n  const CollectionItemSlot = React.forwardRef<ItemElement, CollectionItemSlotProps>(\n    (props, forwardedRef) => {\n      const { scope, children, ...itemData } = props;\n      const ref = React.useRef<ItemElement>(null);\n      const composedRefs = useComposedRefs(forwardedRef, ref);\n      const context = useCollectionContext(ITEM_SLOT_NAME, scope);\n\n      React.useEffect(() => {\n        context.itemMap.set(ref, { ref, ...(itemData as unknown as ItemData) });\n        return () => void context.itemMap.delete(ref);\n      });\n\n      return (\n        <Slot {...{ [ITEM_DATA_ATTR]: '' }} ref={composedRefs}>\n          {children}\n        </Slot>\n      );\n    }\n  );\n\n  CollectionItemSlot.displayName = ITEM_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * useCollection\n   * ---------------------------------------------------------------------------------------------*/\n\n  function useCollection(scope: any) {\n    const context = useCollectionContext(name + 'CollectionConsumer', scope);\n\n    const getItems = React.useCallback(() => {\n      const collectionNode = context.collectionRef.current;\n      if (!collectionNode) return [];\n      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));\n      const items = Array.from(context.itemMap.values());\n      const orderedItems = items.sort(\n        (a, b) => orderedNodes.indexOf(a.ref.current!) - orderedNodes.indexOf(b.ref.current!)\n      );\n      return orderedItems;\n    }, [context.collectionRef, context.itemMap]);\n\n    return getItems;\n  }\n\n  return [\n    { Provider: CollectionProvider, Slot: CollectionSlot, ItemSlot: CollectionItemSlot },\n    useCollection,\n    createCollectionScope,\n  ] as const;\n}\n\nexport { createCollection };\nexport type { CollectionProps };\n", "import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { createCollapsibleScope } from '@radix-ui/react-collapsible';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACCORDION_NAME = 'Accordion';\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp'];\n\nconst [Collection, useCollection, createCollectionScope] =\n  createCollection<AccordionTriggerElement>(ACCORDION_NAME);\n\ntype ScopedProps<P> = P & { __scopeAccordion?: Scope };\nconst [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [\n  createCollectionScope,\n  createCollapsibleScope,\n]);\nconst useCollapsibleScope = createCollapsibleScope();\n\ntype AccordionElement = AccordionImplMultipleElement | AccordionImplSingleElement;\ninterface AccordionSingleProps extends AccordionImplSingleProps {\n  type: 'single';\n}\ninterface AccordionMultipleProps extends AccordionImplMultipleProps {\n  type: 'multiple';\n}\n\nconst Accordion = React.forwardRef<AccordionElement, AccordionSingleProps | AccordionMultipleProps>(\n  (props: ScopedProps<AccordionSingleProps | AccordionMultipleProps>, forwardedRef) => {\n    const { type, ...accordionProps } = props;\n    const singleProps = accordionProps as AccordionImplSingleProps;\n    const multipleProps = accordionProps as AccordionImplMultipleProps;\n    return (\n      <Collection.Provider scope={props.__scopeAccordion}>\n        {type === 'multiple' ? (\n          <AccordionImplMultiple {...multipleProps} ref={forwardedRef} />\n        ) : (\n          <AccordionImplSingle {...singleProps} ref={forwardedRef} />\n        )}\n      </Collection.Provider>\n    );\n  }\n);\n\nAccordion.displayName = ACCORDION_NAME;\n\nAccordion.propTypes = {\n  type(props) {\n    const value = props.value || props.defaultValue;\n    if (props.type && !['single', 'multiple'].includes(props.type)) {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected one of `single | multiple`.'\n      );\n    }\n    if (props.type === 'multiple' && typeof value === 'string') {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected `single` when `defaultValue` or `value` is type `string`.'\n      );\n    }\n    if (props.type === 'single' && Array.isArray(value)) {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected `multiple` when `defaultValue` or `value` is type `string[]`.'\n      );\n    }\n    return null;\n  },\n};\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionValueContextValue = {\n  value: string[];\n  onItemOpen(value: string): void;\n  onItemClose(value: string): void;\n};\n\nconst [AccordionValueProvider, useAccordionValueContext] =\n  createAccordionContext<AccordionValueContextValue>(ACCORDION_NAME);\n\nconst [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(\n  ACCORDION_NAME,\n  { collapsible: false }\n);\n\ntype AccordionImplSingleElement = AccordionImplElement;\ninterface AccordionImplSingleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion item whose content is expanded.\n   */\n  value?: string;\n  /**\n   * The value of the item whose content is expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string): void;\n  /**\n   * Whether an accordion item can be collapsed after it has been opened.\n   * @default false\n   */\n  collapsible?: boolean;\n}\n\nconst AccordionImplSingle = React.forwardRef<AccordionImplSingleElement, AccordionImplSingleProps>(\n  (props: ScopedProps<AccordionImplSingleProps>, forwardedRef) => {\n    const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false,\n      ...accordionSingleProps\n    } = props;\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <AccordionValueProvider\n        scope={props.__scopeAccordion}\n        value={value ? [value] : []}\n        onItemOpen={setValue}\n        onItemClose={React.useCallback(() => collapsible && setValue(''), [collapsible, setValue])}\n      >\n        <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={collapsible}>\n          <AccordionImpl {...accordionSingleProps} ref={forwardedRef} />\n        </AccordionCollapsibleProvider>\n      </AccordionValueProvider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplMultipleElement = AccordionImplElement;\ninterface AccordionImplMultipleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion items whose contents are expanded.\n   */\n  value?: string[];\n  /**\n   * The value of the items whose contents are expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst AccordionImplMultiple = React.forwardRef<\n  AccordionImplMultipleElement,\n  AccordionImplMultipleProps\n>((props: ScopedProps<AccordionImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleItemOpen = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleItemClose = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <AccordionValueProvider\n      scope={props.__scopeAccordion}\n      value={value}\n      onItemOpen={handleItemOpen}\n      onItemClose={handleItemClose}\n    >\n      <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}>\n        <AccordionImpl {...accordionMultipleProps} ref={forwardedRef} />\n      </AccordionCollapsibleProvider>\n    </AccordionValueProvider>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplContextValue = {\n  disabled?: boolean;\n};\n\nconst [AccordionImplProvider, useAccordionContext] =\n  createAccordionContext<AccordionImplContextValue>(ACCORDION_NAME);\n\ntype AccordionImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface AccordionImplProps extends PrimitiveDivProps {\n  /**\n   * Whether or not an accordion is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n}\n\nconst AccordionImpl = React.forwardRef<AccordionImplElement, AccordionImplProps>(\n  (props: ScopedProps<AccordionImplProps>, forwardedRef) => {\n    const { __scopeAccordion, disabled, ...accordionProps } = props;\n    const accordionRef = React.useRef<AccordionImplElement>(null);\n    const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n    const getItems = useCollection(__scopeAccordion);\n\n    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {\n      if (!ACCORDION_KEYS.includes(event.key)) return;\n      const target = event.target as HTMLElement;\n      const triggerCollection = getItems().filter((item) => !item.ref.current?.disabled);\n      const triggerIndex = triggerCollection.findIndex((item) => item.ref.current === target);\n      const triggerCount = triggerCollection.length;\n\n      if (triggerIndex === -1) return;\n\n      // Prevents page scroll while user is navigating\n      event.preventDefault();\n\n      let nextIndex = triggerIndex;\n      switch (event.key) {\n        case 'Home':\n          nextIndex = 0;\n          break;\n        case 'End':\n          nextIndex = triggerCount - 1;\n          break;\n        case 'ArrowDown':\n          nextIndex = triggerIndex + 1;\n          break;\n        case 'ArrowUp':\n          nextIndex = triggerIndex - 1;\n          if (nextIndex < 0) {\n            nextIndex = triggerCount - 1;\n          }\n          break;\n      }\n\n      const clampedIndex = nextIndex % triggerCount;\n      triggerCollection[clampedIndex].ref.current?.focus();\n    });\n\n    return (\n      <AccordionImplProvider scope={__scopeAccordion} disabled={disabled}>\n        <Collection.Slot scope={__scopeAccordion}>\n          <Primitive.div\n            {...accordionProps}\n            ref={composedRefs}\n            onKeyDown={disabled ? undefined : handleKeyDown}\n          />\n        </Collection.Slot>\n      </AccordionImplProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'AccordionItem';\n\ntype AccordionItemContextValue = { open?: boolean; disabled?: boolean; triggerId: string };\nconst [AccordionItemProvider, useAccordionItemContext] =\n  createAccordionContext<AccordionItemContextValue>(ITEM_NAME);\n\ntype AccordionItemElement = React.ElementRef<typeof CollapsiblePrimitive.Root>;\ntype CollapsibleProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Root>;\ninterface AccordionItemProps\n  extends Omit<CollapsibleProps, 'open' | 'defaultOpen' | 'onOpenChange'> {\n  /**\n   * Whether or not an accordion item is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * A string value for the accordion item. All items within an accordion should use a unique value.\n   */\n  value: string;\n}\n\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\nconst AccordionItem = React.forwardRef<AccordionItemElement, AccordionItemProps>(\n  (props: ScopedProps<AccordionItemProps>, forwardedRef) => {\n    const { __scopeAccordion, value, ...accordionItemProps } = props;\n    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const triggerId = useId();\n    const open = (value && valueContext.value.includes(value)) || false;\n    const disabled = accordionContext.disabled || props.disabled;\n\n    return (\n      <AccordionItemProvider\n        scope={__scopeAccordion}\n        open={open}\n        disabled={disabled}\n        triggerId={triggerId}\n      >\n        <CollapsiblePrimitive.Root\n          data-state={open ? 'open' : 'closed'}\n          {...collapsibleScope}\n          {...accordionItemProps}\n          ref={forwardedRef}\n          disabled={disabled}\n          open={open}\n          onOpenChange={(open) => {\n            if (open) {\n              valueContext.onItemOpen(value);\n            } else {\n              valueContext.onItemClose(value);\n            }\n          }}\n        />\n      </AccordionItemProvider>\n    );\n  }\n);\n\nAccordionItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst HEADER_NAME = 'AccordionHeader';\n\ntype AccordionHeaderElement = React.ElementRef<typeof Primitive.h3>;\ntype PrimitiveHeading3Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h3>;\ninterface AccordionHeaderProps extends PrimitiveHeading3Props {}\n\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\nconst AccordionHeader = React.forwardRef<AccordionHeaderElement, AccordionHeaderProps>(\n  (props: ScopedProps<AccordionHeaderProps>, forwardedRef) => {\n    const { __scopeAccordion, ...headerProps } = props;\n    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n    return (\n      <Primitive.h3\n        data-state={getState(itemContext.open)}\n        data-disabled={itemContext.disabled ? '' : undefined}\n        {...headerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nAccordionHeader.displayName = HEADER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'AccordionTrigger';\n\ntype AccordionTriggerElement = React.ElementRef<typeof CollapsiblePrimitive.Trigger>;\ntype CollapsibleTriggerProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>;\ninterface AccordionTriggerProps extends CollapsibleTriggerProps {}\n\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\nconst AccordionTrigger = React.forwardRef<AccordionTriggerElement, AccordionTriggerProps>(\n  (props: ScopedProps<AccordionTriggerProps>, forwardedRef) => {\n    const { __scopeAccordion, ...triggerProps } = props;\n    const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <Collection.ItemSlot scope={__scopeAccordion}>\n        <CollapsiblePrimitive.Trigger\n          aria-disabled={(itemContext.open && !collapsibleContext.collapsible) || undefined}\n          id={itemContext.triggerId}\n          {...collapsibleScope}\n          {...triggerProps}\n          ref={forwardedRef}\n        />\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nAccordionTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AccordionContent';\n\ntype AccordionContentElement = React.ElementRef<typeof CollapsiblePrimitive.Content>;\ntype CollapsibleContentProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>;\ninterface AccordionContentProps extends CollapsibleContentProps {}\n\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\nconst AccordionContent = React.forwardRef<AccordionContentElement, AccordionContentProps>(\n  (props: ScopedProps<AccordionContentProps>, forwardedRef) => {\n    const { __scopeAccordion, ...contentProps } = props;\n    const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <CollapsiblePrimitive.Content\n        role=\"region\"\n        aria-labelledby={itemContext.triggerId}\n        {...collapsibleScope}\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ['--radix-accordion-content-height' as any]: 'var(--radix-collapsible-content-height)',\n          ['--radix-accordion-content-width' as any]: 'var(--radix-collapsible-content-width)',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nAccordionContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Accordion;\nconst Item = AccordionItem;\nconst Header = AccordionHeader;\nconst Trigger = AccordionTrigger;\nconst Content = AccordionContent;\n\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n};\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n};\n"],
  "mappings": "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",
  "names": ["createCollapsibleContext", "createCollapsibleScope", "createContextScope", "CollapsibleProvider", "useCollapsibleContext", "createCollapsibleContext", "Collapsible", "forwardRef", "props", "forwardedRef", "__scopeCollapsible", "open", "openProp", "defaultOpen", "disabled", "onOpenChange", "collapsibleProps", "setOpen", "useControllableState", "prop", "defaultProp", "onChange", "createElement", "$a5c9ff236b90360c7963e374990ad39$var$CollapsibleProvider", "scope", "contentId", "useId", "onOpenToggle", "useCallback", "prevOpen", "Primitive", "div", "_babelRuntimeHelpersEsmExtends", "getState", "undefined", "ref", "CollapsibleTrigger", "triggerProps", "context", "button", "type", "onClick", "composeEventHandlers", "CollapsibleContent", "forceMount", "contentProps", "Presence", "present", "$a5c9ff236b90360c7963e374990ad39$var$CollapsibleContentImpl", "CollapsibleContentImpl", "children", "isPresent", "setIsPresent", "useState", "useRef", "composedRefs", "useComposedRefs", "heightRef", "height", "current", "widthRef", "width", "isOpen", "isMountAnimationPreventedRef", "originalStylesRef", "useEffect", "rAF", "requestAnimationFrame", "cancelAnimationFrame", "useLayoutEffect", "node", "transitionDuration", "style", "animationDuration", "animationFillMode", "rect", "getBoundingClientRect", "id", "hidden", "Root", "Trigger", "Content", "Slot", "forwardRef", "props", "forwardedRef", "children", "slotProps", "Children", "toArray", "some", "isSlottable", "createElement", "Fragment", "map", "child", "$d34e8c328cb3dd19ab7a2f6eafa6ad$var$SlotClone", "_babelRuntimeHelpersEsmExtends", "ref", "displayName", "SlotClone", "isValidElement", "cloneElement", "mergeProps", "composeRefs", "count", "only", "Slottable", "type", "childProps", "overrideProps", "propName", "slotPropValue", "childPropValue", "test", "args", "filter", "Boolean", "join", "createCollection", "name", "PROVIDER_NAME", "createCollectionContext", "createCollectionScope", "createContextScope", "CollectionProviderImpl", "useCollectionContext", "collectionRef", "current", "itemMap", "Map", "CollectionProvider", "props", "scope", "children", "ref", "React", "useRef", "_react", "createElement", "COLLECTION_SLOT_NAME", "CollectionSlot", "forwardRef", "forwardedRef", "context", "composedRefs", "useComposedRefs", "Slot", "ITEM_SLOT_NAME", "ITEM_DATA_ATTR", "CollectionItemSlot", "itemData", "useEffect", "set", "delete", "Provider", "ItemSlot", "useCallback", "collectionNode", "orderedNodes", "Array", "from", "querySelectorAll", "values", "sort", "a", "b", "indexOf", "ACCORDION_KEYS", "Collection", "useCollection", "createCollectionScope", "createCollection", "createAccordionContext", "createAccordionScope", "createContextScope", "createCollapsibleScope", "useCollapsibleScope", "createCollapsibleScope", "Accordion", "React", "forwardRef", "props", "forwardedRef", "type", "accordionProps", "singleProps", "multipleProps", "_react", "createElement", "$c2edcd6d640daf5939a1552e1f81c4$var$Collection", "Provider", "scope", "__scopeAccordion", "$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImplMultiple", "_babelRuntimeHelpersEsmExtends", "ref", "$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImplSingle", "propTypes", "value", "defaultValue", "includes", "Error", "Array", "isArray", "AccordionValueProvider", "useAccordionValueContext", "createAccordionContext", "AccordionCollapsibleProvider", "useAccordionCollapsibleContext", "collapsible", "AccordionImplSingle", "valueProp", "onValueChange", "accordionSingleProps", "setValue", "useControllableState", "prop", "defaultProp", "onChange", "$c2edcd6d640daf5939a1552e1f81c4$var$AccordionValueProvider", "onItemOpen", "onItemClose", "useCallback", "$c2edcd6d640daf5939a1552e1f81c4$var$AccordionCollapsibleProvider", "$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImpl", "AccordionImplMultiple", "accordionMultipleProps", "handleItemOpen", "itemValue", "prevValue", "handleItemClose", "filter", "AccordionImplProvider", "useAccordionContext", "AccordionImpl", "disabled", "accordionRef", "useRef", "composedRefs", "useComposedRefs", "getItems", "useCollection", "handleKeyDown", "composeEventHandlers", "onKeyDown", "event", "_triggerCollection$cl", "ACCORDION_KEYS", "key", "target", "triggerCollection", "item", "_item$ref$current", "current", "triggerIndex", "findIndex", "triggerCount", "length", "preventDefault", "nextIndex", "focus", "$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImplProvider", "Slot", "Primitive", "div", "AccordionItemProvider", "useAccordionItemContext", "AccordionItem", "accordionItemProps", "accordionContext", "valueContext", "collapsibleScope", "triggerId", "useId", "open", "$c2edcd6d640daf5939a1552e1f81c4$var$AccordionItemProvider", "Root", "onOpenChange", "AccordionHeader", "headerProps", "itemContext", "h3", "undefined", "AccordionTrigger", "triggerProps", "collapsibleContext", "ItemSlot", "Trigger", "id", "AccordionContent", "contentProps", "Content", "role", "style", "Item", "Header"]
}
